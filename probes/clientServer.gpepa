rr = 2.0; 
rtmt = 0.3; 
rt = 0.27;
rb = 0.1; 
rd = 1.0; 
rrst = 1.0; 

n = 100; 
m = 60.0;

Client = (request,rr).Client_waiting;
Client_waiting = (data,rd).Client_think;
Client_think = (think,rt).Client; 

Server = (request,rr).Server_get + (break,rb).Server_broken;
Server_get = (data,rd).Server;
Server_broken = (reset,rrst).Server;


Clients{Client[n]}<request,data> Servers{Server[m]}


ODEs(stopTime=40.0,stepSize=0.1,density=10){
   E[Clients:Client],E[Clients:Client_waiting],E[Clients:Client_think];
   E[Servers:Server],E[Servers:Server_get],E[Servers:Server_broken]->"tmp/servers_odes";
   E[E[Servers:Server]],E[Servers:Server]-1.95*Var[Servers:Server]^0.5,E[Servers:Server]+1.95*Var[Servers:Server]^0.5; 
}

/*
Simulation(stopTime=40.0,stepSize=0.1,replications=10000){
   E[Clients:Client],E[Clients:Client_waiting],E[Clients:Client_think];  
   E[Servers:Server],E[Servers:Server_get],E[Servers:Server_broken];
   Var[Servers:Server],Var[Servers:Server_get],Var[Servers:Server_broken]->"tmp/servers_var_sim";
   E[Servers:Server],E[Servers:Server]-1.95*Var[Servers:Server]^0.5,E[Servers:Server]+1.95*Var[Servers:Server]^0.5;  
}*/

Probe (stopTime = 40.0, stepSize=0.1, density=10)
	steady 300
	{
		GProbe = begin: start, end:stop
		observes {
			LProbe = eE: begin, think:end
		}
		where {
			Clients{Client[n]} =>
				Clients{(Client<data, request, think>LProbe)|Client[n-1]}
		}
	}